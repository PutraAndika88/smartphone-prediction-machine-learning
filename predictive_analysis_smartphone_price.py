# -*- coding: utf-8 -*-
"""Predictive Analysis: Smartphone Price

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSX30p4uyLA8Xn51vXzc27G0s5JREJBY

# **Smartphone Price Analysis with Predictive Analysis**

1. Business Understanding
2. Data Understanding (EDA)
3. Data Preparation
4. Model Development

# **Prepare All Packages**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""# **Prepare The Dataset**

Dataset Source: https://www.kaggle.com/datasets/pratikgarai/mobile-phone-specifications-and-prices
"""

data = '/content/ndtv_data_final.csv'

smartphone = pd.read_csv(data, index_col=0)

print(smartphone)

"""## Variable Description

1. **Name**: Smartphone's series
2. **Brand**: Smartphone's brand
3. **Model**: Smartphone's model
4. **Battery Capacity (mAh)**: Smartphone's Battery Capacity
5. **Screen Sizes (Inch)**: Smartphone'screen size
6. **Touchscreen**: Touchscreen feature in smartphone (Yes/No)
7. **Resolution x**: Smartphone horizontal screen resolution
8. **Resolutiony**: Smartphone vertical screen resolution (Yes/No)
9. **Processor**: Smartphone's processor
10. **RAM(MB)**: Smartphone's RAM size
11. **Internal Storage (GB)**: Smartphone's internal storage size
12. **Rear Camera**: Smartphone's rear camera
13. **Front camera**: Smartphone's front camera (Yes/No)
14. **Operating System**: Smartphone's OS
15. **Wi-Fi**: Smartphone's wifi feature
16. **Bluetooth**: Smartphone's bluetooth feature
17. **GPS**: Smartphone's GPS feature
18. **Number of SIMs**: Number of SIMs on smartphone
19. **3G**: 3G feature on smartphone (Yes/No)
20. **4G/LTE**: 4G/LTE feature on smartphone (Yes/No)
21. **Price**: Smartphone's price

"""

smartphone.info()

"""#**EDA (Exploratory Data Analysis)**

#Univariate EDA

#Handling Missing Value
"""

# Check the stat summary in the dataset
smartphone.describe()

# Change the features name
old_column_name = 'Battery capacity (mAh)'
new_column_name = 'battery'

# Change the features name
smartphone.rename(columns={old_column_name: new_column_name}, inplace=True)

smartphone.describe()

# Change the features name
column_name_mapping = {'Screen size (inches)': 'screen_size', 'Resolution x': 'resolution_x', 'Resolution y': 'resolution_y', 'RAM (MB)': 'RAM', 'Internal storage (GB)': 'internal_storage', 'Rear camera': 'rear_camera', 'Front camera': 'front_camera', 'Number of SIMs': 'num_of_sim'}

# Change the features name
smartphone.rename(columns=column_name_mapping, inplace=True)

smartphone.describe()

battery = (smartphone.battery == 0).sum()
screen_size = (smartphone.screen_size == 0).sum()
resolution_x = (smartphone.resolution_x == 0).sum()
resolution_y = (smartphone.resolution_y == 0).sum()
Processor = (smartphone.Processor == 0).sum()
RAM = (smartphone.RAM == 0).sum()
internal_storage = (smartphone.internal_storage == 0).sum()
rear_camera = (smartphone.rear_camera == 0).sum()
front_camera = (smartphone.front_camera == 0).sum()
num_of_sim = (smartphone.num_of_sim == 0).sum()
Price = (smartphone.Price == 0).sum()

print('Zero value in battery column: ', battery)
print('Zero value in screen_size column: ', screen_size)
print('Zero value in resolution_x column: ', resolution_x)
print('Zero value in resolution_y column: ', resolution_y)
print('Zero value in Processor column: ', Processor)
print('Zero value in RAM column: ', RAM)
print('Zero value in internal_storage column: ', internal_storage)
print('Zero value in rear_camera column: ', rear_camera)
print('Zero value in front_camera column: ', front_camera)
print('Zero value in num_of_sim column: ', num_of_sim)
print('Zero value in Price column: ', Price)

smartphone.loc[(smartphone['front_camera']==0)]

# Handling missing value with drop missing value (dropping rows with value = 0)
smartphone = smartphone.loc[(smartphone[['rear_camera','front_camera']]!=0).all(axis=1)]

smartphone.shape

smartphone.describe()

"""# Handling Outliers"""

sns.boxplot(x=smartphone['battery'])

sns.boxplot(x=smartphone['screen_size'])

sns.boxplot(x=smartphone['resolution_x'])

sns.boxplot(x=smartphone['resolution_y'])

sns.boxplot(x=smartphone['Processor'])

sns.boxplot(x=smartphone['RAM'])

sns.boxplot(x=smartphone['internal_storage'])

sns.boxplot(x=smartphone['rear_camera'])

sns.boxplot(x=smartphone['front_camera'])

sns.boxplot(x=smartphone['num_of_sim'])

Q1 = smartphone.quantile(0.25)
Q3 = smartphone.quantile(0.75)
IQR = Q3-Q1
smartphone = smartphone[~((smartphone<(Q1-1.5*IQR))|(smartphone>(Q3+1.5*IQR)))]

smartphone.shape

sns.boxplot(x=smartphone['battery'])

sns.boxplot(x=smartphone['front_camera'])

sns.boxplot(x=smartphone['rear_camera'])

sns.boxplot(x=smartphone['resolution_y'])

sns.boxplot(x=smartphone['resolution_x'])

sns.boxplot(x=smartphone['Processor'])

sns.boxplot(x=smartphone['RAM'])

sns.boxplot(x=smartphone['internal_storage'])

sns.boxplot(x=smartphone['num_of_sim'])

"""##**Univariate Analysis**"""

smartphone.info()

# Split the dataset into two parts (categorical and numerical features)

numerical_features = ['battery',
                      'screen_size',
                      'resolution_x',
                      'resolution_y',
                      'Processor',
                      'RAM',
                      'internal_storage',
                      'rear_camera',
                      'front_camera',
                      'num_of_sim',
                      'Price']

categorical_features = ['Name',
                        'Brand',
                        'Model',
                        'Touchscreen',
                        'Operating system',
                        'Wi-Fi',
                        'Bluetooth',
                        'GPS',
                        '3G',
                        '4G/ LTE']

"""###Categorical Features

Name Feature
"""

feature = categorical_features[0]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Brand Feature"""

feature = categorical_features[1]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Model Feature"""

feature = categorical_features[2]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Touchscreen Feature"""

feature = categorical_features[3]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Operating System Feature"""

feature = categorical_features[4]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Wi-Fi Feature"""

feature = categorical_features[5]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Bluetooth Feature"""

feature = categorical_features[6]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""GPS Feature"""

feature = categorical_features[7]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""3G Feature"""

feature = categorical_features[8]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""4G/ LTE Feature"""

feature = categorical_features[9]
count = smartphone[feature].value_counts()
percent = 100*smartphone[feature].value_counts(normalize=True)

df = pd.DataFrame({'total sample':count,
                   'percentage':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""### Numerical feature"""

smartphone.hist(bins=50, figsize=(20,15))

plt.show

"""## **Multivariate EDA**

### **Categorical Feature**
"""

smartphone.info()

# 'Operating system' to Price
col = 'Operating system'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Wi-Fi'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Touchscreen'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'GPS'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Bluetooth'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = '3G'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = '4G/ LTE'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Brand'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Name'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

col = 'Model'

sns.catplot(x=col,
            y='Price',
            kind='bar',
            dodge=False,
            height=4,
            aspect=3,
            data=smartphone,
            palette='Set3',
            )

plt.title("Average of relative 'price' to - {}".format(col))
plt.show()

"""### **Hasil Analisis Fitur Kategorikal**

1. Pada fitur Operating system (OS), memiliki range harga yang sangat lebar yaitu 4500-18000 dengan harga terendah pada smartphone dengan OS Tizen dengan harga 4500 dan harga tertinggi yaitu smartphone dengan OS iPhone dengan harga tertinggi mencapai 18000. Jadi, fitur **Operating system** **sangat mempengaruhi** fluktuasi harga smartphone

2. Pada fitur Model, berdasarkan hasil bar chart tersebut menunjukkan bahwa harga smartphone sangat berfluktuasi jika dibandingkan berdasarkan pada modelnya. Jadi, kesimpulannya adalah **fitur model sangat mempengaruhi harga smartphone**

3. Pada fitur Name, berdasarkan hasil bar chart tersebut menunjukkan bahwa harga smartphone sangat berfluktuasi jika dibandingkan berdasarkan pada fitur Name. Jadi, kesimpulannya adalah **fitur Name sangat mempengaruhi harga smartphone**

4. Pada fitur Model, berdasarkan hasil bar chart tersebut menunjukkan bahwa harga smartphone sangat berfluktuasi jika dibandingkan berdasarkan pada fitur Model. Jadi, kesimpulannya adalah **fitur Model sangat mempengaruhi harga smartphone**

5. Pada fitur Wi-Fi, memiliki range harga rata-rata 6000-8000 dengan harga tertinggi pada smartphone dengan fitur Wi-Fi dan harga terendah pada smartphone tanpa Wi-Fi. Berdasarkan data tersebut, **fitur Wi-Fi cukup mempengaruhi harga smartphone**

6. Pada fitur Touchscreen, memiliki range harga rata-rata 5500-8000 dengan harga tertinggi pada smartphone dengan fitur Touchscreen dan harga terendah pada smartphone tanpa Touchscreen. Berdasarkan data tersebut, **fitur Touchscreen cukup mempengaruhi harga smartphone**

7. Pada fitur GPS, memiliki range harga rata-rata 6000-8000 dengan harga tertinggi pada smartphone dengan fitur GPS dan harga terendah pada smartphone tanpa GPS. Berdasarkan data tersebut, **fitur GPS cukup mempengaruhi harga smartphone**

8. Pada fitur Bluetooth, memiliki range harga rata-rata 6500-8000 dengan harga tertinggi pada smartphone dengan fitur Bluetooth dan harga terendah pada smartphone tanpa Bluetooth. Berdasarkan data tersebut, **fitur Bluetooth cukup mempengaruhi harga smartphone**

9. Pada fitur 3G, tidak memiliki range harga rata-rata yaitu sama-sama berada di harga 7900. Berdasarkan data tersebut, **fitur 3G tidak mempengaruhi harga smartphone**

10. Pada fitur 4G/ LTE, memiliki range harga rata-rata 6000-8300 dengan harga tertinggi pada smartphone dengan fitur 4G/ LTE dan harga terendah pada smartphone tanpa 4G/ LTE. Berdasarkan data tersebut, **fitur Wi-Fi cukup mempengaruhi harga smartphone**

**Jadi, fitur categorical pada data smartphone ini secara mayoritas mempengaruhi harga smartphone**

### **Numerical Features**
"""

# Hubungan antar fitur numerik
sns.pairplot(smartphone, diag_kind = 'kde')

# Cek hubungan antar fitur numerik
plt.figure(figsize=(10,8))
correlation_matrix = smartphone.corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix,
            annot=True,
            cmap='coolwarm',
            linewidths=0.5)

plt.title("Matrix Correlation for Numerical Features", size=20)

"""**Insights**:

1. Hubungan Price to Battery = 0.38
2. Hubungan Price to screen size = 0.48
3. Hubungan Price to resolution_x = 0.58
4. Hubungan Price to resolution_y = 0.61
5. Hubungan Price to Processor = 0.44
6. Hubungan Price to RAM = 0.61
7. Hubungan Price to Internal_Storage = 0.54
8. Hubungan Price to rear_camera = 0.56
9. Hubungan Price to front_camera = 0.31
1. Hubungan Price to number of sim = 0

- **Seluruh fitur numerikal berhubungan positif terhadap Smartphone Price artinya semakin meningkat kualitas dari fitur tersebut maka akan meningkatkan harga smartphone**
- **Seluruh fitur numerikal (kecuali fitur number of sim) memiliki hubungan yang kuat dalam mempengaruhi harga smartphone dengan range indeks 0.31 - 0.61**
- **Fitur number of sim bersifat netral terhadap harga smartphone karena indeks korelasi bernilai 0**
"""

# Drop feature yg memiliki korelasi lemah terhadap price
smartphone.drop(['num_of_sim'], inplace=True, axis=1)
smartphone.head()

"""# **Data Preparation**"""

print('\nInfo data null in smartphone:\n', smartphone.isnull().sum())

print('Info data duplicate in smartphone dataset:', smartphone.duplicated().sum())

smartphone.dropna(inplace=True)

print('\nInfo data null in smartphone:\n', smartphone.isnull().sum())

smartphone.head(5)

"""##  **One Hot Encoding**"""

from sklearn.preprocessing import OneHotEncoder

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Name'],
                                               prefix='Name')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Brand'],
                                               prefix='Brand')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Model'],
                                               prefix='Model')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Touchscreen'],
                                               prefix='Touchscreen')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Operating system'],
                                               prefix='Operating system')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Wi-Fi'],
                                               prefix='Wi-Fi')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['Bluetooth'],
                                               prefix='Bluetooth')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['GPS'],
                                               prefix='GPS')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['4G/ LTE'],
                                               prefix='4G/ LTE')],axis=1)

smartphone = pd.concat([smartphone, pd.get_dummies(smartphone['3G'],
                                               prefix='3G')],axis=1)


smartphone.drop(['Name',
                        'Brand',
                        'Model',
                        'Touchscreen',
                        'Operating system',
                        'Wi-Fi',
                        'Bluetooth',
                        'GPS',
                        '3G',
                        '4G/ LTE'],
              axis=1,
              inplace=True)

smartphone.head()

"""## **Train-Test Split**"""

# train-test-split dengan 90:10
from sklearn.model_selection import train_test_split

X = smartphone.drop(["Price"],axis=1)
y = smartphone["Price"]
X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    test_size=0.1,
                                                    random_state=123)

# Mengecek jumlah sampel masing-masing
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train datset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## **Modelling**"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['battery',
                      'screen_size',
                      'resolution_x',
                      'resolution_y',
                      'Processor',
                      'RAM',
                      'internal_storage',
                      'rear_camera',
                      'front_camera']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(9)

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN','RandomForest','Boosting'])

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train )

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor

# buat model prediksi
RF =RandomForestRegressor(n_estimators=50,
                          max_depth=16,
                          random_state=55,
                          n_jobs=-1)

RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05,
                             random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# **Model Evaluation**"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train','test'],
                   index=['KNN','RF','Boosting'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
  mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
  mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

  # Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh',
                                                 ax=ax,
                                                 zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
  pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)